generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cart      Cart?
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  imageUrl    String?     @map("image_url")
  stock       Int         @default(0)
  category    String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("products")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String  @map("cart_id")
  productId String  @map("product_id")
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id           String      @id @default(uuid())
  userId       String      @map("user_id")
  total        Decimal     @db.Decimal(10, 2)
  status       OrderStatus @default(PENDING)
  shippingInfo Json?       @map("shipping_info")
  paymentInfo  Json?       @map("payment_info")
  createdAt    DateTime    @default(now()) @map("created_at")
  couponId     String?     @map("coupon_id")
  items        OrderItem[]
  coupon       Coupon?     @relation("OrderToCoupon", fields: [couponId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Review {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  productId String   @map("product_id")
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Coupon {
  id              String   @id @default(uuid())
  alias           String   @unique
  issuedAt        DateTime @map("issued_at")
  expiresAt       DateTime @map("expires_at")
  minPrice        Decimal  @map("min_price") @db.Decimal(10, 2)
  percentDiscount Int      @map("percent_discount")
  usersWhoUsedMe  String[] @map("users_who_used_me")
  maxUsesPerUser  Int      @map("max_uses_per_user")
  maxUsesTotal    Int      @map("max_uses_total")
  isRunning       Boolean  @map("is_running")
  orders          Order[]  @relation("OrderToCoupon")

  @@map("coupons")
}

model Campaign {
  id        String   @id @default(uuid())
  color     String
  name      String
  coupons   String[] @map("coupon_ids")
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")

  @@map("campaigns")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
